syntax = "proto3";

package io.aggregator.view;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "kalix/annotations.proto";
import "google/protobuf/timestamp.proto";
import "io/aggregator/entity/merchant_entity.proto";
import "io/aggregator/view/merchant.proto";

option java_outer_classname = "MerchantsNotPaidModel";

service MerchantsNotPaid {
  option (kalix.codegen) = {
    view: {}
  };

  rpc GetMerchantsNotPaid(MerchantsNotPaidRequest) returns (MerchantsNotPaidResponse) {
    option (kalix.method).view.query = {
      query: "SELECT * AS merchants"
             "  FROM merchants_not_paid OFFSET :merchant_offset LIMIT :merchant_limit"
             " WHERE status != 'Paid'"
    };
    option (google.api.http) = {
      get: "/merchants-not-paid"
    };
  }

  rpc OnMerchantDayActivated(entity.MerchantDayActivated) returns (Merchant) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "merchant"
    };
    option (kalix.method).view.update = {
      table: "merchants_not_paid"
      transform_updates: true
    };
  }

  rpc OnMerchantPaymentRequested(entity.MerchantPaymentRequested) returns (Merchant) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "merchant"
    };
    option (kalix.method).view.update = {
      table: "merchants_not_paid"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (Merchant) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "merchant"
    };
    option (kalix.method).view.update = {
      table: "merchants_not_paid"
      transform_updates: true
    };
  }
}

message MerchantsNotPaidRequest {
  int32 merchant_offset = 1;
  int32 merchant_limit = 2;
}

message MerchantsNotPaidResponse {
  repeated Merchant merchants = 1;
}
