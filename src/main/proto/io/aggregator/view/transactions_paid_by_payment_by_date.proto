syntax = "proto3";

package io.aggregator.view;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "kalix/annotations.proto";
import "google/protobuf/timestamp.proto";
import "io/aggregator/entity/transaction_entity.proto";
import "io/aggregator/view/transaction.proto";

option java_outer_classname = "TransactionsPaidByPaymentByDateModel";

service TransactionsPaidByPaymentByDate {
  option (kalix.codegen) = {
    view: {}
  };

  rpc GetTransactionsPaidByPaymentByDate(TransactionsPaidByPaymentByDateRequest) returns (TransactionsPaidByPaymentByDateResponse) {
    option (kalix.method).view.query = {
      query: "SELECT * AS transactions"
             "  FROM transactions_paid OFFSET :transaction_offset LIMIT :transaction_limit"
             " WHERE transaction_timestamp.seconds >= :`from_date.seconds`"
             "   AND transaction_timestamp.seconds < :`to_date.seconds`"
             "   AND payment_id = :payment_id"
             "   AND merchant_id = :merchant_id"
             "   AND service_code = :service_code"
             "   AND account_from = :account_from"
             "   AND account_to = :account_to"
    };
    option (google.api.http) = {
      get: "/transactions-paid-by-payment-by-date"
    };
  }

  rpc OnTransactionCreated(entity.TransactionCreated) returns (Transaction) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "transaction"
    };
    option (kalix.method).view.update = {
      table: "transactions_paid"
      transform_updates: true
    };
  }

  rpc OnPaymentAdded(entity.PaymentAdded) returns (Transaction) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "transaction"
    };
    option (kalix.method).view.update = {
      table: "transactions_paid"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (Transaction) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "transaction"
    };
    option (kalix.method).view.update = {
      table: "transactions_paid"
      transform_updates: true
    };
  }
}

message TransactionsPaidByPaymentByDateRequest {
  string payment_id = 1;
  string merchant_id = 2;
  string service_code = 3;
  string account_from = 4;
  string account_to = 5;
  google.protobuf.Timestamp from_date = 6;
  google.protobuf.Timestamp to_date = 7;
  int32 transaction_offset = 8;
  int32 transaction_limit = 9;
}

message TransactionsPaidByPaymentByDateResponse {
  repeated Transaction transactions = 1;
}
